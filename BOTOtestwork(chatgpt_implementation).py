import openai
#–ø—Ä–æ—Å—Ç–µ–π—à–∏–π –º–µ—Ç–æ–¥ —Å —Ç–æ—á–∫–∏ –∑—Ä–µ–Ω–∏—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏, –ø—Ä–∏ —ç—Ç–æ–º –Ω–∞–∏–±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–π.
openai.api_key = 'API KEY'
# —Ñ—É–Ω–∫—Ü–∏—è –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ—Ä–∞–∑–∞ –æ—Å–º—ã—Å–ª–µ–Ω–Ω–æ–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–æ–≥–æ, –º–æ–∂–µ—Ç –ª–∏ Chatgpt  —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ —Å–ª–æ–≤–æ
def is_nonsense_string(input_string):
    response = openai.Completion.create(
        engine='text-davinci-003', 
        prompt=input_string,
        max_tokens=1, # –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ–¥–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        n=1,
        stop=None,
        temperature=0, # –∏—Å–∫–ª—é—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –¥–ª—è –±–æ–ª—å—à–µ–π —Ç–æ—á–Ω–æ—Å—Ç–∏
        top_p=1,
        frequency_penalty=0, #–ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –∫ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–º —Å–ª–æ–≤–∞–º –∏ —Ñ—Ä–∞–∑–∞–º –Ω–∞ –Ω—É–ª–µ
        presence_penalty=0
    )
    
    completion_text = response.choices[0].text.strip() # –≤–æ–∑–≤—Ä–∞—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞ (–∏–ª–∏ –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–∏)
    

    if completion_text == '': #–ø—Ä–æ–≤–µ—Ä–∫–∞
        return True
    
    return False

# –ü—Ä–∏–º–µ—Ä—ã —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å—Ç—Ä–æ–∫
test_strings = ['—ã–¥–≤—à–æ–∞—ã–æ–ª–≤—Ç–∞—Å', '–ª—è', 'good', '123', 'üëç', '–í—Å–µ –æ–∫', '–±—ã–ª–æ —á–µ–ª–µ–Ω–¥–∂–µ–≤–æ, –Ω–æ —Å—É–ø–µ—Ä—Å–∫–∏. —Ä–µ—Å–ø–µ–∫—Ç', '1. –ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ 2. –ö—Ä–µ–∞—Ç–∏–≤–Ω–æ 3. –≤—Å—ë –ø–æ–Ω—è—Ç–Ω–æ.']

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä–æ–∫ –Ω–∞ –±–µ—Å—Å–º—ã—Å–ª–µ–Ω–Ω–æ—Å—Ç—å
for string in test_strings:
    if not is_nonsense_string(string):
        print(f"{string} - –±–µ—Å—Å–º—ã—Å–ª–µ–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞")
    else:
        print(f"{string} - –¥–æ–ø—É—Å—Ç–∏–º–∞—è —Å—Ç—Ä–æ–∫–∞")
